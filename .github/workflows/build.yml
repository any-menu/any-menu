name: Build Any-Menu

on:
  push:
    branches: [main]
    tags: ['**'] # tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build-obsidian:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v4
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.10.0
    - name: env use node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: pnpm
    - name: build
      run: |
        pnpm install --frozen-lockfile
        pnpm ob:build
    - name: upload build artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: obsidian-any-menu
        path: |
          manifest.json
          main.js
          styles.css

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest] # ubuntu-latest 版本需要要把 api/window 部分对应功能加上

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Env - FrontEnd - Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Env - FrontEnd - pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Env - Rust - Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Env - Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Env - Rust - Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
      
      - name: Env - FrontEnd - Install frontend dependencies
        working-directory: ./src/Tauri
        run: pnpm install
      
      - name: Build - Tauri application
        working-directory: ./src/Tauri
        run: pnpm tauri build

      - name: Upload MSI artifact (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-windows-msi
          path: ./src/Tauri/src-tauri/target/release/bundle/msi/*.msi
      - name: Upload NSIS artifact (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-windows-nsis
          path: ./src/Tauri/src-tauri/target/release/bundle/nsis/*.exe
      
      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-linux
          path: ./src/Tauri/src-tauri/target/release/bundle/

    #   - name: Create Release
    #     if: startsWith(github.ref, 'refs/tags/v')
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.exe
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.msi
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.AppImage
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.deb
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.ANYMENU }}

  create-release:
    name: Create Release
    if: github.event_name == 'push' # 跳过PR
    needs: [build-obsidian, build-tauri] # 需要等待两个 build job 都成功
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 将所有构建产物下载到 'dist' 目录
          # 这将创建 'dist/obsidian-any-menu'、'dist/any-menu-windows-msi' 等子目录
          path: ./dist
      
      - name: List downloaded artifacts
        run: |
          echo "Listing contents of ./dist:"
          ls -R ./dist

      # 场景一：release 到正式版 tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') # 有tag
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.ANYMENU }}
          # 'tag' 默认就是 github.ref_name (即你推送的 tag)，所以不用写
          name: 'Release ${{ github.ref_name }}' # Release 标题使用 tag 名
          artifacts: |
            ./dist/obsidian-any-menu/*
            ./dist/any-menu-windows-msi/*
            ./dist/any-menu-windows-nsis/*
          generateReleaseNotes: true # 自动根据 commits 生成 release notes
          prerelease: false # 是否预发布
          makeLatest: true  # 是否最后一个版本

      # 场景二：release 到固定的 beta tag
      - name: Create or Update Beta Release
        if: github.ref == 'refs/heads/main' # 没有tag
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.ANYMENU }}
          tag: 'Beta' # 固定的 tag 名
          name: 'Beta Release (risk)' # 固定的 Release 标题
          body: | # 固定的 Release 描述
            非手动的 beta 版本，与手动 beta 版本不同的是，每次 commit 都会更新。
            这也导致了这个版本有可能是存在bug或不可用的。仅供测试使用

            > 下载 tips:
            > 
            > - obsidian 用户下载 main、mainifest、styles 三个文件。或更推荐使用 brat 进行安装
            > - windows 用户下载 msi 或 nsis 文件
            > - linux 等其他平台开发中
          artifacts: |
            ./dist/obsidian-any-menu/*
            ./dist/any-menu-windows-msi/*
            ./dist/any-menu-windows-nsis/*
          commit: ${{ github.sha }} # 将 release 关联到最新的 commit
          # generateReleaseNotes: true # 自动根据 commits 生成 release notes
          allowUpdates: true # 允许更新已存在的 release
          replacesArtifacts: true # 替换掉旧的产物文件
          prerelease: true  # 是否预发布
          makeLatest: false # 是否最后一个版本
