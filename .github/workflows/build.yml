name: Build Any-Menu

on:
  push:
    branches: [main]
    # tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build-obsidian:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v4
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.10.0
    - name: env use node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: pnpm
    - name: build
      run: |
        pnpm install --frozen-lockfile
        pnpm ob:build
    - name: upload build artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: obsidian-any-menu
        path: |
          manifest.json
          main.js
          styles.css

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest] # ubuntu-latest 版本需要要把 api/window 部分对应功能加上

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Env - FrontEnd - Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Env - FrontEnd - pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Env - Rust - Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Env - Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Env - Rust - Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc
      
      - name: Env - FrontEnd - Install frontend dependencies
        working-directory: ./src/Tauri
        run: pnpm install
      
      - name: Build - Tauri application
        working-directory: ./src/Tauri
        run: pnpm tauri build

      - name: Upload MSI artifact (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-windows-msi
          path: ./src/Tauri/src-tauri/target/release/bundle/msi/*.msi
      - name: Upload NSIS artifact (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-windows-nsis
          path: ./src/Tauri/src-tauri/target/release/bundle/nsis/*.exe
      
      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: any-menu-linux
          path: ./src/Tauri/src-tauri/target/release/bundle/

    #   - name: Create Release
    #     if: startsWith(github.ref, 'refs/tags/v')
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.exe
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.msi
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.AppImage
    #         ./src/Tauri/src-tauri/target/release/bundle/**/*.deb
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    # if: startsWith(github.ref, 'refs/tags/v') # 仅当检测到推送的是 'v' 开头的 tag 时才运行
    if: startsWith(github.ref, 'refs/tags/')    # 仅当推送的是 tag 时才运行
    # 需要等待两个 build job 都成功
    needs: [build-obsidian, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # 将所有构建产物下载到 'dist' 目录
          # 这将创建 'dist/obsidian-any-menu'、'dist/any-menu-windows-msi' 等子目录
          path: ./dist
      
      - name: Create Release
        # 使用 softprops/action-gh-release 的 v2 版本
        uses: softprops/action-gh-release@v2
        with:
          # 从下载的产物目录中收集所有文件
          files: |
            ./dist/obsidian-any-menu/main.js
            ./dist/obsidian-any-menu/manifest.json
            ./dist/obsidian-any-menu/styles.css
            ./dist/any-menu-windows-msi/*
            ./dist/any-menu-windows-nsis/*
            # 如果/当 Linux 构建被重新启用时，取消此行的注释
            # ./dist/any-menu-linux/*
          # 自动生成 release notes
          generate_release_notes: true
        env:
          # GITHUB_TOKEN 是由 GitHub Actions 自动提供的
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
