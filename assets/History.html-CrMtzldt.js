import{_ as t,c as n,b as i,o as a}from"./app-BBTbTThO.js";const o={};function l(r,e){return a(),n("div",null,[...e[0]||(e[0]=[i('<h1 id="anycaps-历史" tabindex="-1">AnyCaps 历史</h1><h2 id="linczero-的使用历程" tabindex="-1">LincZero 的使用历程</h2><p>因为 AnyCaps 是我一开始设计出来的，我一开始使用的是 AutoHotKey 方案，后来转到了 Kanata，再后来自己开发 AnyMenu 软件</p><p>而在我不断地切换软件的过程中，虽然过程中也有对方案的优化，但这套方案的基本层和基本用法是没有改变的</p><h2 id="老仓库" tabindex="-1">老仓库</h2><p>这并不是一个新方案，以前于 <a href="https://github.com/LincZero/LincZero-Help-Oneself/" target="_blank" rel="noopener noreferrer">LincZero/LincZero-Help-Oneself</a> 仓库进行更新维护。<br> 目前将其中的快捷游标部分迁移到此仓库中，你可以在该仓库中找到以前的 AutoHotKey 和 Kanata 方案的 commit 历史。</p><p>旧仓库是个比较驳杂的仓库，里面包含了我个人的需要自定义方案，包括但不仅限于:</p><ul><li>输入相关 <ul><li>AutoHotKey 方案</li><li>Kanata 方案</li><li>Via</li><li>输入法挂接方案</li><li>RIME方案</li></ul></li><li>自定义样式相关 <ul><li>Obsidian 样式、css 片段</li><li>Typora 样式</li></ul></li><li>其他相关 <ul><li>... (略)</li></ul></li></ul><p>但是现在由于我要做 AnyMenu 这个产品，其 &quot;快捷游标&quot; (类Caps+，类vim) 方案的前身正是这个旧仓库里的 AutoHotKey 与 Kanata 方案</p><p>为了方便熟悉这两个工具用户进行魔改修改和单独使用快捷游标功能，这里单独拎出来作为一个仓库</p>',10)])])}const c=t(o,[["render",l]]),s=JSON.parse('{"path":"/zh/quick_keys/History.html","title":"AnyCaps 历史","lang":"zh-CN","frontmatter":{"description":"AnyCaps 历史 LincZero 的使用历程 因为 AnyCaps 是我一开始设计出来的，我一开始使用的是 AutoHotKey 方案，后来转到了 Kanata，再后来自己开发 AnyMenu 软件 而在我不断地切换软件的过程中，虽然过程中也有对方案的优化，但这套方案的基本层和基本用法是没有改变的 老仓库 这并不是一个新方案，以前于 LincZe...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AnyCaps 历史\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://any-menu.github.io/any-menu/zh/quick_keys/History.html"}],["meta",{"property":"og:site_name","content":"any-menu"}],["meta",{"property":"og:title","content":"AnyCaps 历史"}],["meta",{"property":"og:description","content":"AnyCaps 历史 LincZero 的使用历程 因为 AnyCaps 是我一开始设计出来的，我一开始使用的是 AutoHotKey 方案，后来转到了 Kanata，再后来自己开发 AnyMenu 软件 而在我不断地切换软件的过程中，虽然过程中也有对方案的优化，但这套方案的基本层和基本用法是没有改变的 老仓库 这并不是一个新方案，以前于 LincZe..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":1.1,"words":330},"filePathRelative":"zh/quick_keys/History.md","excerpt":"\\n<h2>LincZero 的使用历程</h2>\\n<p>因为 AnyCaps 是我一开始设计出来的，我一开始使用的是 AutoHotKey 方案，后来转到了 Kanata，再后来自己开发 AnyMenu 软件</p>\\n<p>而在我不断地切换软件的过程中，虽然过程中也有对方案的优化，但这套方案的基本层和基本用法是没有改变的</p>\\n<h2>老仓库</h2>\\n<p>这并不是一个新方案，以前于 <a href=\\"https://github.com/LincZero/LincZero-Help-Oneself/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LincZero/LincZero-Help-Oneself</a> 仓库进行更新维护。<br>\\n目前将其中的快捷游标部分迁移到此仓库中，你可以在该仓库中找到以前的 AutoHotKey 和 Kanata 方案的 commit 历史。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"zh/","link":"zh/quick_keys/README.html"}],"localMap":{"nodes":[{"id":"zh/quick_keys/History.md","value":{"title":"History","path":"zh/quick_keys/History.md","outlink":[],"backlink":["zh/quick_keys/README.md"]}},{"id":"zh/quick_keys/README.md","value":{"title":"zh/","path":"zh/quick_keys/README.md","outlink":[],"backlink":[]}}],"links":[{"source":"zh/quick_keys/README.md","target":"zh/quick_keys/History.md"}]}}}');export{c as comp,s as data};
