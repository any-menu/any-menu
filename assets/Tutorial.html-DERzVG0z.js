import{_ as a,c as i,b as e,o as l}from"./app-DnyzJRow.js";const o="/any-menu/assets/keyboard-layout-default-CPo22dlx.png",n="/any-menu/assets/keyboard-layout-cursor-CNqv2SnC.png",p="/any-menu/assets/keyboard-layout-line-29aTz9A1.png",s="/any-menu/assets/keyboard-layout-page-g4xL7ZTH.png",r="/any-menu/assets/keyboard-layout-mouse-BmDr4Q_Q.png",c="/any-menu/assets/keyboard-layout-num-Ddv1u8z6.png",d="/any-menu/assets/keyboard-layout-sign-B2kcOnuz.png",h="/any-menu/assets/keyboard-layout-rshift-cZZ2vy7L.png",u="/any-menu/assets/keyboard-layout-space-BNftYK5o.png",m="/any-menu/assets/keyboard-layout-vim-CQ1I8uGD.png",y={};function k(g,t){return l(),i("div",null,[...t[0]||(t[0]=[e('<h1 id="anycaps" tabindex="-1">AnyCaps</h1><h2 id="anycaps-设计方案" tabindex="-1">AnyCaps 设计方案</h2><p>感谢 <a href="https://keyboard-layout-editor.com/" target="_blank" rel="noopener noreferrer">https://keyboard-layout-editor.com/</a> 提供的键盘快捷键示意图生成方案</p><p>图片使用说明: 中间表示长按，下面表示短按</p><h3 id="默认层" tabindex="-1">默认层</h3><p><img src="'+o+'" alt="" loading="lazy"></p><h3 id="两个特殊层" tabindex="-1">两个特殊层</h3><p>这里还有两个特殊层 (Shift 和 Ctrl)，但内容过少我就不另外制图了</p><ul><li>Caps + 空格 = 回车</li><li>Shift + 空格 = Shift + 回车</li><li>Ctrl + 空格 = Ctrl + 回车</li></ul><h3 id="caps-光标层" tabindex="-1">Caps-光标层</h3><p>Caps 与其子层与 Shift 按键完全兼容，<strong>可以同时按住 Caps 和 Shift 进行选择</strong></p><p><img src="'+n+'" alt="" loading="lazy"></p><h3 id="caps-词层、选择层" tabindex="-1">Caps-词层、选择层</h3><p>先说词层</p><blockquote><p>相当于按住Ctrl键的光标层，光标的左右移动会以单词为单位</p><p>这里 &quot;词&quot; 的单位以Ctrl行为为准，更准确地描述是:<br> 被空格/英文符号/半角符号(下划线除外)所分割的<br> 一段连续的下划线/字母/汉字/中文汉字/全角符号等</p><p>之所以这里使用另外的按键来代替Ctrl，是因为按住CapsLock的同时并不好再去按到Ctrl的位置，否则容易造成手位变形。当然，如果你喜欢你也可以去按Ctrl键</p></blockquote><p>再说选择层</p><blockquote><p>同上，可以与其他层相叠加</p></blockquote><h3 id="caps-行层" tabindex="-1">Caps-行层</h3><p><img src="'+p+'" alt="" loading="lazy"></p><h3 id="caps-页层" tabindex="-1">Caps-页层</h3><p><img src="'+s+'" alt="" loading="lazy"></p><h3 id="caps-鼠标层" tabindex="-1">Caps-鼠标层</h3><p><img src="'+r+'" alt="" loading="lazy"></p><h3 id="caps-数字层" tabindex="-1">Caps-数字层</h3><p><img src="'+c+'" alt="" loading="lazy"></p><h3 id="引号-符号层" tabindex="-1">引号-符号层</h3><div class="callout" data-callout="warning"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg></div><div class="callout-title-inner">Warning</div></div><div class="callout-content"><p>对于 kanata 和 autohotkey 来说，当前的成对括号部分不是很好用，无法在保证快速的前提下识别是否有选中内容。AnyMenu 版本则无此问题</p></div></div><p><img src="'+d+'" alt="" loading="lazy"></p><h2 id="右shift层-编辑器层" tabindex="-1">右shift层-编辑器层</h2><p><img src="'+h+'" alt="" loading="lazy"></p><blockquote><p>注意Z使用的不是Ctrl层，而是编辑器层的规律<br> 左Shift用作撤回，而Z用左重做</p><ul><li>一是手感的考虑 (左Shift比Z好按)</li><li>二是左右性的考虑 (保持左键向左，右键向右的思维逻辑符合使用直觉)<br> (历史堆栈的左右 (网页浏览器/资源管理器等软件的左右历史))</li></ul></blockquote><h2 id="空格-编辑器层-弃用" tabindex="-1">空格-编辑器层 (弃用)</h2><blockquote><p>一开始设计的是空格，后来发现打字较快时会有点卡，并且在非 AnyMenu 上更难以应用这种方案，需要做很复杂的判断逻辑。<br> 后来改用了 右Shift 层 (见上节)</p></blockquote><p>这层基本与编辑器相关，需要编辑器配合。例如文本环境得支持历史栈才能用的撤销恢复 (而且恢复可能是 c-s-z 或 c-y)</p><p><img src="'+u+'" alt="" loading="lazy"></p><blockquote><p>记忆小技巧：在文本输入的过程中，特别是输入法组合输入时，撤销操作会有点像智能字/词单位的 Backspace，所以这里也给到 I 键，逻辑统一</p></blockquote><h2 id="vim默认层" tabindex="-1">vim默认层</h2><p><code>Caps+*</code> 对比传统的 vim 方案</p><p>vim方案其实并不适合直接用于 <code>Caps+*</code>，否则会存在一些缺点：</p><ul><li>有些按键是很难在按住 <code>Caps</code> 的同时去按下的，特别是键盘左半区</li><li>ESC按键过远，不适合频繁按</li><li>有些操作需要编辑器自身支持。而 <code>Caps+*</code> 应是先集成无需编辑器依赖的，再集成需要编辑器依赖的，保证泛用</li><li>需要返回命令模式再操作再回到插入模式的逻辑繁琐麻烦</li></ul><p>(图片示意: 中间是长按或大写，下面是短按。蓝色是仅移动光标，红色是层，橙色是需要编辑器配合。可以辅助在线 vim 编辑来理解: <a href="https://rtool.cn/vim.html" target="_blank" rel="noopener noreferrer">https://rtool.cn/vim.html</a>)</p><p>参考: <a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/w3cnote/all-vim-cheatsheat.html</a></p><p><img src="'+m+'" alt="" loading="lazy"></p><h2 id="比较" tabindex="-1">比较</h2><p>除了 AnyCaps 外，还存在着许多其他的 <code>Caps+</code> 或 类vim方案，如:</p><ul><li>这里介绍的 AnyCaps</li><li>原版的 vim (局限于vim软件，或支持vim模式/插件的软件，如vscode、obsidian)</li><li>CapsLock++</li><li>CapsEZ</li><li>...</li></ul><p>AnyCaps 的优点:</p><ul><li>综合考虑: 易用度、对称性、记忆性、按键频率和手感、英文 (除非刚好能和前面的匹配上，作为一个顺带，否则不会使用按键英语作为决定按键位置的原因)</li></ul>',48)])])}const C=a(y,[["render",k]]),_=JSON.parse('{"path":"/zh/quick_keys/Tutorial.html","title":"AnyCaps","lang":"zh-CN","frontmatter":{"description":"AnyCaps AnyCaps 设计方案 感谢 https://keyboard-layout-editor.com/ 提供的键盘快捷键示意图生成方案 图片使用说明: 中间表示长按，下面表示短按 默认层 两个特殊层 这里还有两个特殊层 (Shift 和 Ctrl)，但内容过少我就不另外制图了 Caps + 空格 = 回车 Shift + 空格 = Sh...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AnyCaps\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://any-menu.github.io/any-menu/zh/quick_keys/Tutorial.html"}],["meta",{"property":"og:site_name","content":"any-menu"}],["meta",{"property":"og:title","content":"AnyCaps"}],["meta",{"property":"og:description","content":"AnyCaps AnyCaps 设计方案 感谢 https://keyboard-layout-editor.com/ 提供的键盘快捷键示意图生成方案 图片使用说明: 中间表示长按，下面表示短按 默认层 两个特殊层 这里还有两个特殊层 (Shift 和 Ctrl)，但内容过少我就不另外制图了 Caps + 空格 = 回车 Shift + 空格 = Sh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":3.34,"words":1001},"filePathRelative":"zh/quick_keys/Tutorial.md","excerpt":"\\n<h2>AnyCaps 设计方案</h2>\\n<p>感谢 <a href=\\"https://keyboard-layout-editor.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://keyboard-layout-editor.com/</a> 提供的键盘快捷键示意图生成方案</p>\\n<p>图片使用说明: 中间表示长按，下面表示短按</p>\\n<h3>默认层</h3>\\n<p></p>\\n<h3>两个特殊层</h3>\\n<p>这里还有两个特殊层 (Shift 和 Ctrl)，但内容过少我就不另外制图了</p>\\n<ul>\\n<li>Caps + 空格 = 回车</li>\\n<li>Shift + 空格 = Shift + 回车</li>\\n<li>Ctrl + 空格 = Ctrl + 回车</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"README.html"},{"title":"README.zh","link":"README.zh.html"},{"title":"zh/","link":"zh/quick_keys/README.html"}],"localMap":{"nodes":[{"id":"zh/quick_keys/Tutorial.md","value":{"title":"Tutorial","path":"zh/quick_keys/Tutorial.md","outlink":[],"backlink":["README.md","README.zh.md","zh/quick_keys/README.md"]}},{"id":"README.md","value":{"title":"README","path":"README.md","outlink":[],"backlink":[]}},{"id":"README.zh.md","value":{"title":"README.zh","path":"README.zh.md","outlink":[],"backlink":[]}},{"id":"zh/quick_keys/README.md","value":{"title":"zh/","path":"zh/quick_keys/README.md","outlink":[],"backlink":[]}}],"links":[{"source":"README.md","target":"zh/quick_keys/Tutorial.md"},{"source":"README.zh.md","target":"zh/quick_keys/Tutorial.md"},{"source":"zh/quick_keys/README.md","target":"zh/quick_keys/Tutorial.md"}]}}}');export{C as comp,_ as data};
